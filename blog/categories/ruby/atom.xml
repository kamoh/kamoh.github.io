<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | lolgramming]]></title>
  <link href="http://kamoh.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kamoh.github.io/"/>
  <updated>2014-07-06T22:21:03-04:00</updated>
  <id>http://kamoh.github.io/</id>
  <author>
    <name><![CDATA[Ben Serviss]]></name>
    <email><![CDATA[ben.serviss@flatironschool.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Named Parameters: What's A Nice Keyword Argument Like You Doing in a Place Like This?]]></title>
    <link href="http://kamoh.github.io/blog/2014/06/20/named-parameters-whats-a-nice-keyword-argument-like-you-doing-in-a-place-like-this/"/>
    <updated>2014-06-20T00:29:30-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/06/20/named-parameters-whats-a-nice-keyword-argument-like-you-doing-in-a-place-like-this</id>
    <content type="html"><![CDATA[<p>In one of the labs from a few weeks ago, my Ruby class was introduced to named parameters, also known as keyword arguments. These parameters are defined in the method signature with a default value in the format (named_parameter: default_value).</p>

<p>Because their behavior appears similar to standard arguments with default values, most of us were mystified about their purpose. In Ruby, standard arguments with default values appear in the format (standard_argument=default_value). Take a look at the similarities:</p>

<p>```ruby
  def drink(spirit: &ldquo;whiskey&rdquo;) # spirit = named parameter</p>

<pre><code>"Another #{spirit} for my friend here, barkeep."
</code></pre>

<p>  end</p>

<p>  drink
  #=> &ldquo;Another #{spirit} for my friend here, barkeep.&rdquo;</p>

<p>  def eat(snacks=&ldquo;pretzels&rdquo;) # snacks = standard argument with default value</p>

<pre><code>"And some #{snacks} - I'm famished!"
</code></pre>

<p>  end</p>

<p>  eat
  #=> &ldquo;And some pretzels &ndash; I&rsquo;m famished!&rdquo;
```
As beginners, was there some use for them we just weren&rsquo;t grasping? Or were these named parameters just another option bestowed by the Ruby gods in order afford us more options when coding?</p>

<p>Looking at this in another perspective, if you try to call a standard method with arguments without using any, you get an error:</p>

<p>```ruby
  def drink(container)</p>

<pre><code>"Pour me a #{container}, willya?"
</code></pre>

<p>  end</p>

<p>  drink(&ldquo;glass&rdquo;)
  #=> &ldquo;Pour me a glass, willya?&rdquo;</p>

<p>  drink
  #=> ArgumentError: wrong number of arguments (0 for 1)
```
It&rsquo;s logical to assume that named parameters would work the same way. Yet if you try this with a method with named parameters, it still runs &ndash; just like how standard parameters use default values for missing arguments!</p>

<p>While this is helpful to have, it&rsquo;s nothing that we can&rsquo;t do through default parameters.</p>

<p>Then we learned that named parameters don&rsquo;t care about the order in which you call them.</p>

<p>On one hand, neat trick!</p>

<p>```ruby
  def bootlegger(distillery: location, source: location)</p>

<pre><code>"We smuggled the bourbon from #{source}, but we brewed this moonshine in #{distillery}. Dee-licious!"
</code></pre>

<p>  end</p>

<p>  bootlegger(source: &ldquo;Canada&rdquo;, distillery: &ldquo;Grandma&rsquo;s old bathtub&rdquo;)
  #=> &ldquo;We smuggled the bourbon from Canada, but we brewed this moonshine in Grandma&rsquo;s old bathtub. Dee-licious!&rdquo;
```
On the other hand, who cares? This feature is a nice wrinkle, but it doesn&rsquo;t really seem like it warrants the existence of the function.</p>

<p>After a little digging and experimentation, I finally found a reason why named parameters are worth the trouble: They allow methods to require specifically-named parameters when being invoked, for an added measure of security!</p>

<p style="text-align:center;"><img src="/images/keep_out.jpeg" title="Oh, you forgot to close your parentheses? Scram!" ></p>

<p style="text-align:center;"> <em>Source: <a href="https://www.flickr.com/photos/double_seven/4407285444/?rb=1">Flickr</a></em></p>

<p>```ruby
  def speakeasy_knock(password: )</p>

<pre><code>"'#{password}'? Good enough for me, come on in!"
</code></pre>

<p>  end</p>

<p>  speakeasy_knock
  #=> ArgumentError: missing keyword: password</p>

<p>  speakeasy_knock(password: &ldquo;Open up, chump!&rdquo;)
  #=> &ldquo;&lsquo;Open up, chump&rsquo;? Good enough for me, come on in!&rdquo;
```
Of course, you&rsquo;ll need added security measures beyond just requiring the named parameter. But suddenly, having named parameters available as a tool starts to make sense.</p>

<p>Because standard arguments take input regardless of typing or designation, and because default arguments are fine not taking any input from the method call at all, requiring a named parameter for a method to function gives it a measure of protection against reckless usage.</p>

<p>To strain an already-exhausted metaphor, in certain use cases, named parameters can act exactly like locked doors that require code words in order to grant entry.</p>

<p style="text-align:center;"><img src="/images/62014/speakeasy.jpg" title="Hooray for named parameters and bootlegging, in no particular order!" ></p>

<p style="text-align:center;"> <em>Source: <a href="http://speakeasy216.com/">Speakeasy216</a></em></p>

<p>For more gory details about this and other functions introduced in Ruby 2.0.0, check out this substantial post by Marc-Andre Lafortune:
<a href="http://blog.marc-andre.ca/2013/02/23/ruby-2-by-example/">http://blog.marc-andre.ca/2013/02/23/ruby-2-by-example/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School: Two Week Recap]]></title>
    <link href="http://kamoh.github.io/blog/2014/06/13/flatiron-two-week-recap/"/>
    <updated>2014-06-13T23:25:05-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/06/13/flatiron-two-week-recap</id>
    <content type="html"><![CDATA[<p>Today marks two weeks at Flatiron. Just like we&rsquo;ve been prepared for, it&rsquo;s been an emotional and intellectual rollercoaster. The first week was mainly about getting acquainted with git, command line navigation, setting up our environment &ndash; and then we dove right into Ruby.</p>

<p>We closed out the week with a ton of labs designed to test our burgeoning programming skills, and by Saturday my head was crammed so full of new knowledge I had no idea what to make of it.</p>

<p>Week two picked up right where we left off, pushing further into Ruby methods, data structure manipulation, object oriented practices and web scraping.</p>

<p>By the end of the week, I was filled with a totally bizarre combination of emotions &ndash; exhilaration from learning so much, bafflement at still not being able to implement the solutions that I could visualize, disappointment at not understanding at a faster pace, and a surreal sense of accomplishment of how far I&rsquo;ve come in understanding programming logic since the class had begun.</p>

<p>Overall, these first weeks have impressed upon me the supreme importance of working with others to overcome problems, and of shifting your mindset to make room for better solutions to present themselves. One of my main goals for the summer is to develop a better programming mindset when approaching problems, and though there&rsquo;s a long way to go, after these first weeks I can slowly feeling it start to take shape.</p>
]]></content>
  </entry>
  
</feed>
