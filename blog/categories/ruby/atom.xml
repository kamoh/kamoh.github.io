<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | lolgramming]]></title>
  <link href="http://kamoh.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://kamoh.github.io/"/>
  <updated>2014-10-15T10:41:44-04:00</updated>
  <id>http://kamoh.github.io/</id>
  <author>
    <name><![CDATA[Ben Serviss]]></name>
    <email><![CDATA[ben@benserviss.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Binary Search Trees in Ruby]]></title>
    <link href="http://kamoh.github.io/blog/2014/08/23/binary-search-trees-in-ruby/"/>
    <updated>2014-08-23T13:58:05-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/08/23/binary-search-trees-in-ruby</id>
    <content type="html"><![CDATA[<p>There&rsquo;s never a lack of options for ways to store data. Depending on the type of data you&rsquo;re dealing with, you could do much worse than a binary search tree.</p>

<p>The concept behind binary search trees is simple.</p>

<ol>
<li><p>The tree is node based, and a new tree is initialized with a root node. This node has a value, a left space, and a right space. Both left and right spaces are empty to begin with.</p></li>
<li><p>When you want to add a new node, the tree compares the value of the new node to the value of the root node.</p></li>
<li><p>If the new node&rsquo;s value is less than the root&rsquo;s value, it&rsquo;s stored in the root node&rsquo;s left space. If there&rsquo;s already a node there, then compare against that node and repeat.</p></li>
<li><p>If the new node&rsquo;s value is greater than the root&rsquo;s value, it&rsquo;s stored in the root node&rsquo;s right space. If there&rsquo;s already a node there, then compare against that node and repeat.</p></li>
</ol>


<p style="text-align:center;"><img class="right" src="/images/82314/binary_search_tree.png" title="&lsquo;Binary search tree" ></p>

<p>That&rsquo;s it!</p>

<p>Things get a little more complex once the tree starts to fill out, and the algorithm has to continue traversing down each branch of the tree to find the perfect spot for your new node.</p>

<p>There&rsquo;s also the question of inserting nodes with duplicate values. While it&rsquo;s strongly recommended to exclude duplicate values from a binary search tree, you can elect to store them to the left (by allowing less than or equal to nodes) or right (by allowing greater than or equal to nodes). If you do allow this, you run the risk of creating an unbalanced tree with different numbers of branches on either side.</p>

<p>One way of implementing binary search trees in Ruby is with two separate classes: one for the tree itself and one for the node objects that populate it.</p>

<p>```ruby
class BST</p>

<p>  attr_accessor :data</p>

<p>  def initialize(data)</p>

<pre><code>@root = Node.new(data)
@sorted_data = []
</code></pre>

<p>  end</p>

<p>  def insert(val)</p>

<pre><code>@root.insert(val) 
</code></pre>

<p>  end</p>

<p>  def traverse(node=@root)</p>

<pre><code>traverse(node.left) if node.left 
@sorted_data &lt;&lt; node.data 
traverse(node.right) if node.right 
@sorted_data
</code></pre>

<p>  end</p>

<p>end</p>

<p>class Node</p>

<p>  attr_accessor :data, :left, :right</p>

<p>  def initialize(data)</p>

<pre><code>@data = data
@left = nil
@right = nil
</code></pre>

<p>  end</p>

<p>  def insert(val)</p>

<pre><code>new_node = Node.new(val) 
if new_node.data &lt; data &amp;&amp; left.nil?
  self.left = new_node 
elsif new_node.data &lt; data 
  left.insert(val) 
elsif right.nil?
  self.right = new_node 
else 
  right.insert(val)
end
</code></pre>

<p>  end</p>

<p>end
```
As you use the insert method on the tree to add new nodes, it filters down to the insert instance method on the root node, then recursively calls itself on each child node as it searches for an empty place to attach the new node to the tree.</p>

<p>The traverse method also uses recursion to visit each node and add their values to an array, starting down the left-most node at the bottom of the tree and working its way over to the right-most node.</p>

<p>Binary search trees perform relatively well, with average time complexity of O(log(n)) for all operations and O(n) at their worst.</p>

<p>However, since the shape of the tree is wholly dependent on the order that new nodes are added, the overall structure of the tree may degrade over time after numerous deletions. Also, since tree traversal requires comparisons against each node, very large trees may rack up longer search times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Named Parameters: What's A Nice Keyword Argument Like You Doing in a Place Like This?]]></title>
    <link href="http://kamoh.github.io/blog/2014/06/20/named-parameters-whats-a-nice-keyword-argument-like-you-doing-in-a-place-like-this/"/>
    <updated>2014-06-20T00:29:30-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/06/20/named-parameters-whats-a-nice-keyword-argument-like-you-doing-in-a-place-like-this</id>
    <content type="html"><![CDATA[<p>In one of the labs from a few weeks ago, my Ruby class was introduced to named parameters, also known as keyword arguments. These parameters are defined in the method signature with a default value in the format (named_parameter: default_value).</p>

<p>Because their behavior appears similar to standard arguments with default values, most of us were mystified about their purpose. In Ruby, standard arguments with default values appear in the format (standard_argument=default_value). Take a look at the similarities:</p>

<p>```ruby
  def drink(spirit: &ldquo;whiskey&rdquo;) # spirit = named parameter</p>

<pre><code>"Another #{spirit} for my friend here, barkeep."
</code></pre>

<p>  end</p>

<p>  drink
  #=> &ldquo;Another #{spirit} for my friend here, barkeep.&rdquo;</p>

<p>  def eat(snacks=&ldquo;pretzels&rdquo;) # snacks = standard argument with default value</p>

<pre><code>"And some #{snacks} - I'm famished!"
</code></pre>

<p>  end</p>

<p>  eat
  #=> &ldquo;And some pretzels &ndash; I&rsquo;m famished!&rdquo;
```
As beginners, was there some use for them we just weren&rsquo;t grasping? Or were these named parameters just another option bestowed by the Ruby gods in order afford us more options when coding?</p>

<p>Looking at this in another perspective, if you try to call a standard method with arguments without using any, you get an error:</p>

<p>```ruby
  def drink(container)</p>

<pre><code>"Pour me a #{container}, willya?"
</code></pre>

<p>  end</p>

<p>  drink(&ldquo;glass&rdquo;)
  #=> &ldquo;Pour me a glass, willya?&rdquo;</p>

<p>  drink
  #=> ArgumentError: wrong number of arguments (0 for 1)
```
It&rsquo;s logical to assume that named parameters would work the same way. Yet if you try this with a method with named parameters, it still runs &ndash; just like how standard parameters use default values for missing arguments!</p>

<p>While this is helpful to have, it&rsquo;s nothing that we can&rsquo;t do through default parameters.</p>

<p>Then we learned that named parameters don&rsquo;t care about the order in which you call them.</p>

<p>On one hand, neat trick!</p>

<p>```ruby
  def bootlegger(distillery: location, source: location)</p>

<pre><code>"We smuggled the bourbon from #{source}, but we brewed this moonshine in #{distillery}. Dee-licious!"
</code></pre>

<p>  end</p>

<p>  bootlegger(source: &ldquo;Canada&rdquo;, distillery: &ldquo;Grandma&rsquo;s old bathtub&rdquo;)
  #=> &ldquo;We smuggled the bourbon from Canada, but we brewed this moonshine in Grandma&rsquo;s old bathtub. Dee-licious!&rdquo;
```
On the other hand, who cares? This feature is a nice wrinkle, but it doesn&rsquo;t really seem like it warrants the existence of the function.</p>

<p>After a little digging and experimentation, I finally found a reason why named parameters are worth the trouble: They allow methods to require specifically-named parameters when being invoked, for an added measure of security!</p>

<p style="text-align:center;"><img src="/images/keep_out.jpeg" title="Oh, you forgot to close your parentheses? Scram!" ></p>

<p style="text-align:center;"> <em>Source: <a href="https://www.flickr.com/photos/double_seven/4407285444/?rb=1">Flickr</a></em></p>

<p>```ruby
  def speakeasy_knock(password: )</p>

<pre><code>"'#{password}'? Good enough for me, come on in!"
</code></pre>

<p>  end</p>

<p>  speakeasy_knock
  #=> ArgumentError: missing keyword: password</p>

<p>  speakeasy_knock(password: &ldquo;Open up, chump!&rdquo;)
  #=> &ldquo;&lsquo;Open up, chump&rsquo;? Good enough for me, come on in!&rdquo;
```
Of course, you&rsquo;ll need added security measures beyond just requiring the named parameter. But suddenly, having named parameters available as a tool starts to make sense.</p>

<p>Because standard arguments take input regardless of typing or designation, and because default arguments are fine not taking any input from the method call at all, requiring a named parameter for a method to function gives it a measure of protection against reckless usage.</p>

<p>To strain an already-exhausted metaphor, in certain use cases, named parameters can act exactly like locked doors that require code words in order to grant entry.</p>

<p style="text-align:center;"><img src="/images/62014/speakeasy.jpg" title="Hooray for named parameters and bootlegging, in no particular order!" ></p>

<p style="text-align:center;"> <em>Source: <a href="http://speakeasy216.com/">Speakeasy216</a></em></p>

<p>For more gory details about this and other functions introduced in Ruby 2.0.0, check out this substantial post by Marc-Andre Lafortune:
<a href="http://blog.marc-andre.ca/2013/02/23/ruby-2-by-example/">http://blog.marc-andre.ca/2013/02/23/ruby-2-by-example/</a></p>
]]></content>
  </entry>
  
</feed>
