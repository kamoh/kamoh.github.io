<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron School | lolgramming]]></title>
  <link href="http://kamoh.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://kamoh.github.io/"/>
  <updated>2014-07-20T21:40:02-04:00</updated>
  <id>http://kamoh.github.io/</id>
  <author>
    <name><![CDATA[Ben Serviss]]></name>
    <email><![CDATA[ben.serviss@flatironschool.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flatiron School: Week Seven]]></title>
    <link href="http://kamoh.github.io/blog/2014/07/19/flatiron-school-week-seven/"/>
    <updated>2014-07-19T18:57:47-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/07/19/flatiron-school-week-seven</id>
    <content type="html"><![CDATA[<p>Something clicked this week. Between starting JavaScript on Wednesday, a great morning project using Spotify&rsquo;s API, and becoming even more comfortable withstanding torrents of new information, I&rsquo;m starting to feel like a programmer. It&rsquo;s not only that &ndash; when I look around at the other students, I no longer see people who came here because they wanted to learn how to program. I just see more programmers.</p>

<p>It&rsquo;s an exhilarating, confounding, amazing feeling.</p>

<p>On Monday and Tuesday we barreled through most of the remaining Rails topics &ndash; some more details on using sessions to track user logins, Rails' asset pipeline, and AREL for handling complex database queries. AREL in particular was difficult to get through, since you are drilling down through AREL&rsquo;s syntax to the base SQL below, but it&rsquo;s easy to see how powerful it can be once you learn how to properly use it.</p>

<p>We also covered self-referential associations, in cases where you want to refer to a join table&rsquo;s column by a different name, and spent a little time looking at JSON&rsquo;s parsing with Spotify&rsquo;s web API (which was a lot of fun!).</p>

<p>On Wednesday, we dove into JavaScript. Most of us were excited to learn about it since we&rsquo;ve all been dying to start playing around with more user-facing elements of web development, and despite its cranky syntax, the consensus among most of the students is that JS and jQuery are great tools.</p>

<p style="text-align:center;"> <div style="float:right"><script type="text/javascript" src="http://video.foxbusiness.com/v/embed.js?id=3670694770001&w=466&h=263">texty</script><p text-align="right"><i>Fox Business came to the campus a few weeks ago to do a segment.<br>I&rsquo;m literally coding with my back against the wall at 1:02 &amp; 3:40.</i></p></div></p>

<p>The most satisfying part of working with JavaScript has been how relatively easy it&rsquo;s been to pick up. Before Flatiron, when I&rsquo;d try to learn programming every other year or so, I would spend a week trying online courses and exercises before giving up in frustration.</p>

<p>Now, not only has it been weirdly smooth picking up an entirely new language, but I keep seeing so many similarities between JS and Ruby that make learning it even easier. Aside from components present in every programming language like strings and arrays, seeing similarities like how JavaScript&rsquo;s &lsquo;this&rsquo; mirror&rsquo;s Ruby&rsquo;s &lsquo;self&rsquo; makes it so much easier to get a grasp on a new language.</p>

<p>I&rsquo;ve also been going to the school on Saturday and Sunday for at least two weeks now, and plan on doing so until the end of the course. My group has started working on our group project, and we still have a lot of work to do before we present on August 5th. But even though I&rsquo;m literally there every day, I can&rsquo;t wait to finish this blog post and get back to work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School: Week Six]]></title>
    <link href="http://kamoh.github.io/blog/2014/07/12/flatiron-school-week-six/"/>
    <updated>2014-07-12T22:22:03-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/07/12/flatiron-school-week-six</id>
    <content type="html"><![CDATA[<p>This was a big one. On Monday, we finally started working with Rails. Especially coming from Sinatra, the size and heft of Rails was immediately apparent. Rails is a powerful framework to be sure, but since there&rsquo;s so much going on, it can feel confusing when trying to figure out exactly how some of its abstracted methods operate.</p>

<p>For example, Rails' form builder is a helpful way to build out both simple and complex forms using a more minimalist approach &ndash; yet its heavy reliance on internal methods abstracted several layers below the surface lends it a steep learning curve for most of the students. This dynamic seems to be par for the course for Rails in general.</p>

<p>While there is definitely a ton of utility to be gained from having such tools available, there is a danger of treating these features like a black box. Fortunately, nearly all of us have enough innate curiosity and dogged determination to find out just what is exactly going on under the hood.</p>

<p style="text-align:center;"> <div style="float:right"><iframe class="vine-embed" src="https://vine.co/v/MxvTl3mtaE1/embed/postcard" width="480" height="480" frameborder="2" text-align="right"></iframe><script async src="//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script><p style="text-align:center"><em>It&rsquo;s hard work, but code monkeys gotta unwind too.</em></p></div></p>

<p>We were also introduced to Rails' router, which acts as an intermediary for page requests between the user&rsquo;s view and the controllers; both form builder and form tags for creating intelligent forms; partials (to help break out commong header and navigation elements away from the main page templates); validation and other callbacks; and authentication through creating and maintaining sessions.</p>

<p>Outside of class, on fellow student <a href="http://callahanchris.github.io/">Chris Callhan</a>&rsquo;s suggestion I started reading <a href="http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330">Practical Object-Oriented Programming in Ruby</a> by Sandi Metz, aka POODR. Hilarious acronym aside, Metz&rsquo;s book breaks down the rationale behind object-oriented programming, and shows just why it&rsquo;s so important. Gaining an new perspective outside of class materials and projects is defintely helpful in maintaining a cohesive point of view on what we&rsquo;re learning and how it all fits together.</p>

<p>It&rsquo;s inspiring and humbling to know that, even once I figure out the fundamentals of programming, there&rsquo;s still a lifetime of techniques and best practices to learn.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Curious Chairs of the Flatiron School]]></title>
    <link href="http://kamoh.github.io/blog/2014/07/06/the-curious-chairs-of-the-flatiron-school/"/>
    <updated>2014-07-06T19:17:32-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/07/06/the-curious-chairs-of-the-flatiron-school</id>
    <content type="html"><![CDATA[<p>The first time I walked into The Flatiron School, I thought to myself: &ldquo;What are these crazy orange things?&rdquo;</p>

<p>I had come to one of the weekly <a href="http://www.meetup.com/nyc-on-rails/">NYC on Rails</a> meetups in December of 2013 to check out the vibe and decide if I wanted to apply to the school&rsquo;s web development program. Strewn about the main meeting space were knee-high, accordion-esque bright orange&hellip; things.</p>

<p>Were they chairs? Were they stools? Were they the missing business ends of giant toddler-sized <a href="http://thumb9.shutterstock.com/display_pic_with_logo/710830/710830,1300264918,2/stock-photo-red-and-yellow-child-s-toy-hammer-73266583.jpg">toy hammers</a>?</p>

<p style="text-align:center;"><img class="left" src="/images/7614/nyc_on_rails_dec_13_meetup.jpg" width="450" title="NYC on Rails meetup in December, 2013. I&rsquo;m in the middle (somewhere)." ></p>

<p>Spoiler: They turned out to be chairs. Ergonomic chairs, in fact, created by designer <a href="http://www.stylepark.com/en/designer/alan-heller">Alan Heller</a>. The <a href="http://www.ergoergo.com">ErgoErgo</a> chairs (as they&rsquo;re officially called) were designed to encourage active sitting, relying on the sittee&rsquo;s core muscles for stability as you rock gently back and forth.</p>

<p>Once I had gotten used to the concept, using the chair turned out to be fun in its own novel way. Figuring out how to best use the chair added a playful dimension in talking to the other meetuppers, helping ground the evening in a more open-minded mood.</p>

<p>Now that I&rsquo;m a full-time student at Flatiron, I&rsquo;ve noticed how easily my classmates have incorporated the chairs into their routines. Since they&rsquo;re so modular and light, it&rsquo;s easy to grab a few and turn any table into a lunch spot or meeting area, use one as a footrest, or even corral a bunch into a nifty nap corner. In just a matter of weeks, the ubiquity of these strange little chairs had become a given.</p>

<p>Cool, right? There&rsquo;s something else entirely that explains why these peculiar little chairs fit in so well here &ndash; and it&rsquo;s because <b>the entire process of encountering, evaluating, interacting and experimenting with them is a perfect metaphor for learning to program.</b></p>

<p><img class="right" src="/images/7614/nap_time.jpg" width="420" title="Sometimes, the call of the nap proves irresistible." ></p>

<p>Upon first glance, ErgoErgo doesn&rsquo;t look like any chair that belongs in an office setting &ndash; there&rsquo;s no back, they&rsquo;re too short, the shape is wrong, the color is far too bright &ndash; and you&rsquo;re immediately thrown out of your comfort zone, just as someone new to programming is quickly buried in confusion.</p>

<p>Then, as you figure out that it&rsquo;s just another type of chair, you try sitting on it and gradually learn how it operates &ndash; how much rocking you like, how much give each side allows, etc. This is analogous to the long acclimation phase of learning to program &ndash; deciphering what error messages mean, how data structures behave, what kind of commands are expected, and so forth.</p>

<p>Finally, as you accept ErgoErgo&rsquo;s new definition of what a chair can mean, you grow comfortable in its use &ndash; turning something that was strange and unfamiliar moments ago into something you totally understand. It goes without saying that the programming equivalent to this stage is rather long, but the metaphor is already complete. Something that once beguiled you as intimidating or impossible is now something eminently knowable, with time and experience the only obstacles to an increased understanding.</p>

<blockquote><p>The entire process of encountering, evaluating, interacting and experimenting with them is a perfect metaphor for learning to program.</p></blockquote>

<p>A major part of becoming a programmer is mental. The mental shift from &ldquo;I need a programmer to help me&rdquo; when faced with a technical problem to &ldquo;I can figure this out&rdquo; is an important one; the transition from being frustrated with code defects to being driven by curiosity to find the problem is critical in staying motivated to improve.</p>

<p>As much as I may be reading into this, and as off-the-wall a metaphor it may seem, having these odd chairs around as I&rsquo;m trying to mold myself into a programmer is a constant reminder that what may seem unfamiliar and alien one day may become familiar, welcome and fun the next.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School: Week Five]]></title>
    <link href="http://kamoh.github.io/blog/2014/07/05/flatiron-school-week-five/"/>
    <updated>2014-07-05T18:36:53-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/07/05/flatiron-school-week-five</id>
    <content type="html"><![CDATA[<p>This week, we focused on working in Sinatra as much as possible. It&rsquo;s really a nifty tool for quickly creating web apps.</p>

<p>Getting the hang of handling user request data through Sinatra&rsquo;s params hash and forms took a little while, but even during the confusing parts I was more curious about why something wasn&rsquo;t working than frustrated. The thrill of the bug hunt is getting harder and harder to deny as this class goes on.</p>

<p>We also dove into RESTful practices, handling route variables for Sinatra&rsquo;s controllers, and started moving into holistic full-stack testing as opposed to the unit tests we&rsquo;ve been doing so far.</p>

<p>I&rsquo;ve also been sick since Thursday, and have been having the same bizarre Sinatra dream of not being able to specify the right route to get to the index page. If only they had binding.pry for sick dreams!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flatiron School: Week Four]]></title>
    <link href="http://kamoh.github.io/blog/2014/06/28/flatiron-school-week-four/"/>
    <updated>2014-06-28T17:29:01-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/06/28/flatiron-school-week-four</id>
    <content type="html"><![CDATA[<p>Week four was a notable turning point. I&rsquo;ve definitely grown comfortable with having all kinds of new topics and tools hurled at me, and rather than frantically trying to cram every bit of information into my head at once, I&rsquo;ve somehow become better at parsing the infodumps for smaller bites of ideas to play with and process.</p>

<p>We started off the week with an introduction to Rake tasks, a helpful way to automate common tasks you might perform in a given Ruby development environment. We plowed forward with ActiveRecord&rsquo;s associations, which are essentially macros for generating methods that describe relationships between related columns in database tables.</p>

<p>All of that was well and good, but it was the introduction of ERB that changed everything. ERB, or embedded Ruby, is a templating system that embeds Ruby into HTML pages as they&rsquo;re generated. It&rsquo;s complex to get right &ndash; since you&rsquo;re passing information from the database to the ERB page, it&rsquo;s easy to screw up the data hand-off &ndash; but our first project using it was a real, honest-to-god website in HTML.</p>

<p>It may have been an ultra-barebones site, but seeing something you&rsquo;ve coded pop up in the browser after three weeks of command line applications was a welcome change.</p>

<p>Once we hit ERB, the material took a sharp turn toward the internet. We went through the overall structure of the internet and how communication works, the different types of http requests, Ruby&rsquo;s Rack webserver interface, and finally Sinatra, a domain-specific language (DSL) designed for easily creating web applications (with a minimal interface that makes Rack look crotchety as hell by comparison).</p>

<p>Until we get to Rails, it looks like we&rsquo;ll be fine-tuning everything we&rsquo;ve learned up to now in Sinatra. It&rsquo;s definitely tricky, but I&rsquo;m really liking playing around with Sinatra &ndash; and seeing the results pop up in an actual browser only hints at all the awesomeness still to come.</p>
]]></content>
  </entry>
  
</feed>
