<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron School | lolgramming]]></title>
  <link href="http://kamoh.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://kamoh.github.io/"/>
  <updated>2016-02-04T11:00:07-05:00</updated>
  <id>http://kamoh.github.io/</id>
  <author>
    <name><![CDATA[Ben Serviss]]></name>
    <email><![CDATA[ben@benserviss.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Curious Chairs of the Flatiron School]]></title>
    <link href="http://kamoh.github.io/blog/2014/07/06/the-curious-chairs-of-the-flatiron-school/"/>
    <updated>2014-07-06T19:17:32-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/07/06/the-curious-chairs-of-the-flatiron-school</id>
    <content type="html"><![CDATA[<p>The first time I walked into The Flatiron School, I thought to myself: &ldquo;What are these crazy orange things?&rdquo;</p>

<p>I had come to one of the weekly <a href="http://www.meetup.com/nyc-on-rails/">NYC on Rails</a> meetups in December of 2013 to check out the vibe and decide if I wanted to apply to the school&rsquo;s web development program. Strewn about the main meeting space were knee-high, accordion-esque bright orange&hellip; things.</p>

<p>Were they chairs? Were they stools? Were they the missing business ends of giant toddler-sized <a href="http://thumb9.shutterstock.com/display_pic_with_logo/710830/710830,1300264918,2/stock-photo-red-and-yellow-child-s-toy-hammer-73266583.jpg">toy hammers</a>?</p>

<p style="text-align:center;"><img class="left" src="/images/7614/nyc_on_rails_dec_13_meetup.jpg" width="450" title="NYC on Rails meetup in December, 2013. I&rsquo;m in the middle (somewhere)." ></p>

<p>Spoiler: They turned out to be chairs. Ergonomic chairs, in fact, created by designer <a href="http://www.stylepark.com/en/designer/alan-heller">Alan Heller</a>. The <a href="http://www.ergoergo.com">ErgoErgo</a> chairs (as they&rsquo;re officially called) were designed to encourage active sitting, relying on the sittee&rsquo;s core muscles for stability as you rock gently back and forth.</p>

<p>Once I had gotten used to the concept, using the chair turned out to be fun in its own novel way. Figuring out how to best use the chair added a playful dimension in talking to the other meetuppers, helping ground the evening in a more open-minded mood.</p>

<p>Now that I&rsquo;m a full-time student at Flatiron, I&rsquo;ve noticed how easily my classmates have incorporated the chairs into their routines. Since they&rsquo;re so modular and light, it&rsquo;s easy to grab a few and turn any table into a lunch spot or meeting area, use one as a footrest, or even corral a bunch into a nifty nap corner. In just a matter of weeks, the ubiquity of these strange little chairs had become a given.</p>

<p>Cool, right? There&rsquo;s something else entirely that explains why these peculiar little chairs fit in so well here &ndash; and it&rsquo;s because <b>the entire process of encountering, evaluating, interacting and experimenting with them is a perfect metaphor for learning to program.</b></p>

<p><img class="right" src="/images/7614/nap_time.jpg" width="420" title="Sometimes, the call of the nap proves irresistible." ></p>

<p>Upon first glance, ErgoErgo doesn&rsquo;t look like any chair that belongs in an office setting &ndash; there&rsquo;s no back, they&rsquo;re too short, the shape is wrong, the color is far too bright &ndash; and you&rsquo;re immediately thrown out of your comfort zone, just as someone new to programming is quickly buried in confusion.</p>

<p>Then, as you figure out that it&rsquo;s just another type of chair, you try sitting on it and gradually learn how it operates &ndash; how much rocking you like, how much give each side allows, etc. This is analogous to the long acclimation phase of learning to program &ndash; deciphering what error messages mean, how data structures behave, what kind of commands are expected, and so forth.</p>

<p>Finally, as you accept ErgoErgo&rsquo;s new definition of what a chair can mean, you grow comfortable in its use &ndash; turning something that was strange and unfamiliar moments ago into something you totally understand. It goes without saying that the programming equivalent to this stage is rather long, but the metaphor is already complete. Something that once beguiled you as intimidating or impossible is now something eminently knowable, with time and experience the only obstacles to an increased understanding.</p>

<blockquote><p>The entire process of encountering, evaluating, interacting and experimenting with them is a perfect metaphor for learning to program.</p></blockquote>

<p>A major part of becoming a programmer is mental. The mental shift from &ldquo;I need a programmer to help me&rdquo; when faced with a technical problem to &ldquo;I can figure this out&rdquo; is an important one; the transition from being frustrated with code defects to being driven by curiosity to find the problem is critical in staying motivated to improve.</p>

<p>As much as I may be reading into this, and as off-the-wall a metaphor it may seem, having these odd chairs around as I&rsquo;m trying to mold myself into a programmer is a constant reminder that what may seem unfamiliar and alien one day may become familiar, welcome and fun the next.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Named Parameters: What's A Nice Keyword Argument Like You Doing in a Place Like This?]]></title>
    <link href="http://kamoh.github.io/blog/2014/06/20/named-parameters-whats-a-nice-keyword-argument-like-you-doing-in-a-place-like-this/"/>
    <updated>2014-06-20T00:29:30-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/06/20/named-parameters-whats-a-nice-keyword-argument-like-you-doing-in-a-place-like-this</id>
    <content type="html"><![CDATA[<p>In one of the labs from a few weeks ago, my Ruby class was introduced to named parameters, also known as keyword arguments. These parameters are defined in the method signature with a default value in the format (named_parameter: default_value).</p>

<p>Because their behavior appears similar to standard arguments with default values, most of us were mystified about their purpose. In Ruby, standard arguments with default values appear in the format (standard_argument=default_value). Take a look at the similarities:</p>

<p>```ruby
  def drink(spirit: &ldquo;whiskey&rdquo;) # spirit = named parameter</p>

<pre><code>"Another #{spirit} for my friend here, barkeep."
</code></pre>

<p>  end</p>

<p>  drink
  #=> &ldquo;Another #{spirit} for my friend here, barkeep.&rdquo;</p>

<p>  def eat(snacks=&ldquo;pretzels&rdquo;) # snacks = standard argument with default value</p>

<pre><code>"And some #{snacks} - I'm famished!"
</code></pre>

<p>  end</p>

<p>  eat
  #=> &ldquo;And some pretzels &ndash; I&rsquo;m famished!&rdquo;
```
As beginners, was there some use for them we just weren&rsquo;t grasping? Or were these named parameters just another option bestowed by the Ruby gods in order afford us more options when coding?</p>

<p>Looking at this in another perspective, if you try to call a standard method with arguments without using any, you get an error:</p>

<p>```ruby
  def drink(container)</p>

<pre><code>"Pour me a #{container}, willya?"
</code></pre>

<p>  end</p>

<p>  drink(&ldquo;glass&rdquo;)
  #=> &ldquo;Pour me a glass, willya?&rdquo;</p>

<p>  drink
  #=> ArgumentError: wrong number of arguments (0 for 1)
```
It&rsquo;s logical to assume that named parameters would work the same way. Yet if you try this with a method with named parameters, it still runs &ndash; just like how standard parameters use default values for missing arguments!</p>

<p>While this is helpful to have, it&rsquo;s nothing that we can&rsquo;t do through default parameters.</p>

<p>Then we learned that named parameters don&rsquo;t care about the order in which you call them.</p>

<p>On one hand, neat trick!</p>

<p>```ruby
  def bootlegger(distillery: location, source: location)</p>

<pre><code>"We smuggled the bourbon from #{source}, but we brewed this moonshine in #{distillery}. Dee-licious!"
</code></pre>

<p>  end</p>

<p>  bootlegger(source: &ldquo;Canada&rdquo;, distillery: &ldquo;Grandma&rsquo;s old bathtub&rdquo;)
  #=> &ldquo;We smuggled the bourbon from Canada, but we brewed this moonshine in Grandma&rsquo;s old bathtub. Dee-licious!&rdquo;
```
On the other hand, who cares? This feature is a nice wrinkle, but it doesn&rsquo;t really seem like it warrants the existence of the function.</p>

<p>After a little digging and experimentation, I finally found a reason why named parameters are worth the trouble: They allow methods to require specifically-named parameters when being invoked, for an added measure of security!</p>

<p style="text-align:center;"><img src="/images/keep_out.jpeg" title="Oh, you forgot to close your parentheses? Scram!" ></p>

<p style="text-align:center;"> <em>Source: <a href="https://www.flickr.com/photos/double_seven/4407285444/?rb=1">Flickr</a></em></p>

<p>```ruby
  def speakeasy_knock(password: )</p>

<pre><code>"'#{password}'? Good enough for me, come on in!"
</code></pre>

<p>  end</p>

<p>  speakeasy_knock
  #=> ArgumentError: missing keyword: password</p>

<p>  speakeasy_knock(password: &ldquo;Open up, chump!&rdquo;)
  #=> &ldquo;&lsquo;Open up, chump&rsquo;? Good enough for me, come on in!&rdquo;
```
Of course, you&rsquo;ll need added security measures beyond just requiring the named parameter. But suddenly, having named parameters available as a tool starts to make sense.</p>

<p>Because standard arguments take input regardless of typing or designation, and because default arguments are fine not taking any input from the method call at all, requiring a named parameter for a method to function gives it a measure of protection against reckless usage.</p>

<p>To strain an already-exhausted metaphor, in certain use cases, named parameters can act exactly like locked doors that require code words in order to grant entry.</p>

<p style="text-align:center;"><img src="/images/62014/speakeasy.jpg" title="Hooray for named parameters and bootlegging, in no particular order!" ></p>

<p style="text-align:center;"> <em>Source: <a href="http://speakeasy216.com/">Speakeasy216</a></em></p>

<p>For more gory details about this and other functions introduced in Ruby 2.0.0, check out this substantial post by Marc-Andre Lafortune:
<a href="http://blog.marc-andre.ca/2013/02/23/ruby-2-by-example/">http://blog.marc-andre.ca/2013/02/23/ruby-2-by-example/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Learn to Program?]]></title>
    <link href="http://kamoh.github.io/blog/2014/05/27/why-learn-to-program/"/>
    <updated>2014-05-27T10:10:07-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/05/27/why-learn-to-program</id>
    <content type="html"><![CDATA[<p>Starting on the first week of June, I&rsquo;ll be starting as a web development student at the <a href="http://www.flatironschool.com">Flatiron School</a>. The course is full-time intensive, meeting every day from 9-6 for twelve weeks. Students enter as programming newbies and leave as employed, full-stack web developers.</p>

<p>Since graduating from college, I&rsquo;d been working in the video game industry as a designer and producer. So why the switch to programming?</p>

<p>I&rsquo;ve always been interested in how computers work. Though I&rsquo;ve long messed around with light coding, websites and scripting here and there over the past ten years, I&rsquo;ve never sat down to formally learn it (aside from two poorly-taught classes in high school and college). After a <a href="http://weatherlightus.tumblr.com/">friend of mine</a> went through Flatiron&rsquo;s program, his constant praise for the experience piqued my interest, and after getting accepted, I decided to go.</p>

<p>However, curiosity in programming is more than just a long-time interest. The world today runs on software, especially over the web. If you&rsquo;re able to not only understand how the web works, but capable of creating your own tools that leverage it, you wield immense power. I&rsquo;ve always valued being a creator over just being a consumer, and the knowledge I hope to gain from this class will push me even further to the former.</p>

<p>Over the course of the class, I&rsquo;ll be posting updates and thoughts in this blog. It&rsquo;s going to be an interesting summer.</p>
]]></content>
  </entry>
  
</feed>
