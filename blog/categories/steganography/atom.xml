<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: steganography | lolgramming]]></title>
  <link href="http://kamoh.github.io/blog/categories/steganography/atom.xml" rel="self"/>
  <link href="http://kamoh.github.io/"/>
  <updated>2015-02-06T16:27:21-05:00</updated>
  <id>http://kamoh.github.io/</id>
  <author>
    <name><![CDATA[Ben Serviss]]></name>
    <email><![CDATA[ben@benserviss.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Encoding Messages in Fake Spam Using Polymorphic Interfaces]]></title>
    <link href="http://kamoh.github.io/blog/2014/10/21/secret-codes-in-spam/"/>
    <updated>2014-10-21T12:05:23-04:00</updated>
    <id>http://kamoh.github.io/blog/2014/10/21/secret-codes-in-spam</id>
    <content type="html"><![CDATA[<p>There&rsquo;s something interesting about spam. I&rsquo;m not talking about the barrage of poorly-disguised junk mail everbody gets &ndash; I&rsquo;m talking about the special kind of spam that combines just the right amount of unlikely phrase pairings and absurdist imagery to create a new kind of confusion unique to the modern age.</p>

<p style="text-align:center;"><img class="right" src="/images/102314/great-spam.png" width="500" title="Some great spam." ></p>

<p>A few weeks ago, I made a <a href="http://www.webopedia.com/TERM/S/steganography.html">steganography</a> project, <a href="http://www.spamencoder.com/">SpamEncoder</a>, using this caliber of &lsquo;spam as art&rsquo; as the medium to hide secret messages in.</p>

<p>It&rsquo;s really simple to use &ndash; you just put the message you want to hide in the &lsquo;Encode&rsquo; field, then press the button to instantly produce a coded version of the message. When you want to decode it, just copy the text in the &lsquo;Decode&rsquo; field and press that button. Couldn&rsquo;t be simpler!</p>

<p>However, getting this to work just how I wanted was a little trickier. Here&rsquo;s how I did it.</p>

<h1>Step 1: Case Statement</h1>

<p>For the very first version of the app, I wanted to get something working as quickly as possible. Once I had a prototype up, it&rsquo;d be much easier to see where the issues and unexpected problems would come from.</p>

<p>The first incarnation was a straight letter substitution, using a hideous case statement to swap out each letter of the original message for a new encoded word.</p>

<p>```ruby
  # Encode method</p>

<p>  def encode_letter_replace(letter)</p>

<pre><code>case letter
when "a"
  "cialis "
when "b"
  "loans "
when "c"
  "enhancement "
when "d"
  "pills "
when "e"
  "sale "
when "f"
  "nigeria "
...
</code></pre>

<p>  # Decode method</p>

<p>  def message_reverse_engineer(message)</p>

<pre><code>message.gsub!("cialis ","a")
message.gsub!("loans ","b")
message.gsub!("enhancement ","c")
message.gsub!("pills ","d")
message.gsub!("sale ","e")
message.gsub!("nigeria ","f")  
...
</code></pre>

<p>```</p>

<p>Despite being as clunky as possible, it worked well enough to prove out the concept and bring a few issues to light I hadn&rsquo;t anticipated:</p>

<p>  <strong>1. The algorithm would need to handle lowercase and uppercase letters, as well as some special characters;</strong></p>

<p>  <strong>2. Challenges in swapping out individual characters with spam phrases instead of single spammy words; and</strong></p>

<p>  <strong>3. Preserving carriage returns in the original message.</strong></p>

<p>Handling lowercase and uppercase letters was easy &ndash; I just added different phrase substitutions for all 52 case variations of the English alphabet, plus a few of the more common special characters. The others, however, were much more interesting.</p>

<h1>2. Polymorphic Phrase Library</h1>

<p>Replacing single characters with encoded phrases took a fair chunk of time to nail down. While the first version duplicated the entire character/spam word key in both the encode and decode methods, any time I made a change to one method chain, the other would break.</p>

<p>After working on this for a bit, I realized that a &lsquo;phrase library&rsquo; store made the most sense. Using a hash for the data structure meant I could remove all duplication and condense the phrase library into just one method.</p>

<p>Depending on the operation the user wanted to do, this method could return either an encoded phrase for a character to be encoded, or the original character for all occurrences of a given spam phrase. I&rsquo;ll come back to this in a bit.</p>

<p>```ruby
def library(input) # takes a hash of either { letter: letter } or { message: message } key value pair
  phrase_library = {</p>

<pre><code>'a' =&gt; ["hilarious spam phrase 1 ","mildly alumsing spam phrase 2 "],
'b' =&gt; ["delightful spam phrase 3 ","hackneyed spam phrase 4"],
...
</code></pre>

<p>```</p>

<h1>3. Preserving Carriage Returns</h1>

<p>The last issue was something I dealt with almost as soon as the first version started working. Because the <code>encode</code> operation strips out all spaces in the message so it can iterate over each character and make the substitutions, I was losing any carriage returns the user included in the original message. Since my goal was to preserve the original message completely, including superfluous carriage returns, this wouldn&rsquo;t do.</p>

<p>To handle this, the program replaces all <code>\n</code> returns with the ♤ UTF-8 character, which is then replaced with spam phrases just like any other character. When decoding, the phrases associated with the spade character are replaced with the spade, then finally replaced with <code>\n</code> characters right before the whole message is restored to its decoded form and output back to the user.</p>

<p><code>ruby
message.gsub(" ","‡").gsub(/\n/,"♤").split("").each do |letter| # replacing all spaces and carriage returns with temp characters
  # encode each individual character of the message
end
</code></p>

<h1>4. Random Phrase Selection</h1>

<p>Everything was looking good, except for one final problem. If you encoded a message, then added just one more character (or even a short word), it would just append more phrases to the existing encoded message. This wasn&rsquo;t good enough! Even if you just changed one character, the decoded message should be totally different.</p>

<p>Solving this last problem turned out well. I couldn&rsquo;t use a random number to select which phrase to use to replace a character, since it would introduce an element of randomness that felt out of place in a formalized cryptography system.</p>

<p>Instead, I relied on an obvious constant &ndash; the length of the message.</p>

<p>```ruby</p>

<h1>in initialize, set the message text to @message and set the @message_length_key</h1>

<p>def initialize(message_input)
  @message = message_input
  @message_length_key = message.length.to_s[-1].to_i
end</p>

<h1>in the encode method, iterate over each character in the message and replace each with a phrase</h1>

<p>  message_length_key += 1 # increment the key for selecting phrases
  message_length_key &ndash;= 11 if message_length_key > 9</p>

<h1>in the library method</h1>

<h1>if sending a character to the library to be encoded, we need to return a phrase</h1>

<p>character = input[:letter] if input[:letter]
if character
  if !phrase_library[character].nil?</p>

<pre><code>return phrase_library[character][message_length_key]
</code></pre>

<p>  else</p>

<pre><code>return character
</code></pre>

<p>  end</p>

<h1>otherwise, we have a message to be decoded, and we need the original character in the key</h1>

<p>else
  phrase_library.each do |char,phrase_list|</p>

<pre><code>phrase_list.each do |phrase|
  message.gsub!(phrase,char) if message.include?(phrase)
end
</code></pre>

<p>  end
  message
end
```</p>

<p>When encoding, the <code>message_length_key</code> variable is initialized with the last digit of the length of the message. Then, for every character substitution, the key increases by one. Since I only wrote/found 10 spam phrases for each character, a check runs on <code>message_length_key</code> for every loop and reduces the value if it every gets too high.</p>

<p>And that&rsquo;s it! It was a pretty fun project, and a good excuse to see what some challenges are when developing crytography systems. Plus, writing lots of gibberish turns out to be pretty fun.</p>

<p>The whole thing&rsquo;s open sourced and up on github here: <a href="https://github.com/kamoh/spam-encoder">https://github.com/kamoh/spam-encoder</a></p>

<p>sign your pitty virtuous checkboox thousands dogs chasing squirrels in TARGET&nbsp;</p>

<p>dungeons and potlucks i am real person plus homelessness accreditation pine cone living wage certainly, &ndash;</p>

<p>bagels, and severe windblown acne. Chris is dead, Job for you! more and bots have been replaced with people new flavor? Pepsi Google told me in whispers the truth savings, a bust iced tea and beverage rappers opportunity of a lifetime, my bagels, and denial of sunrise attack textile gremlins eating more and&nbsp;</p>

<p>classifieds? Job now on website valley of the getting rich quick was dead? explicit, yet full of romance filed in slowly, all</p>
]]></content>
  </entry>
  
</feed>
